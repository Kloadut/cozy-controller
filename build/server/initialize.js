// Generated by CoffeeScript 1.7.0
var App, Client, checkStart, clientDS, conf, config, controller, couchDBClient, couchDBStarted, errors, fs, initAppsFiles, initDir, initFiles, initLogFiles, initNewDir, initTokenFile, oldConfig, patch, permission, randomString, removeOldDir, spawn, start, startStack;

fs = require('fs');

Client = require('request-json').JsonClient;

spawn = require('child_process').spawn;

controller = require('./lib/controller');

permission = require('./middlewares/token');

App = require('./lib/app').App;

conf = require('./lib/conf');

config = require('./lib/conf').get;

oldConfig = require('./lib/conf').getOld;

patch = require('./lib/patch');

couchDBClient = new Client('http://localhost:5984');

clientDS = new Client('http://localhost:9101');

randomString = function(length) {
  var string;
  if (length == null) {
    length = 32;
  }
  string = "";
  while (string.length < length) {
    string += Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};


/*
    Initialize directory for application source code
 */

initNewDir = (function(_this) {
  return function(callback) {
    var sourceDir;
    sourceDir = config('dir_source');
    if (sourceDir === '/usr/local/cozy/apps') {
      if (!fs.existsSync('/usr/local/cozy')) {
        return fs.mkdir('/usr/local/cozy', function(err) {
          if (err != null) {
            callback(err);
          }
          return fs.mkdir('/usr/local/cozy/apps', function(err) {
            return callback(err);
          });
        });
      } else if (!fs.existsSync('/usr/local/cozy/apps')) {
        return fs.mkdir('/usr/local/cozy/apps', function(err) {
          return callback(err);
        });
      } else {
        return callback();
      }
    } else {
      return callback();
    }
  };
})(this);


/*
    Remove old source directory if configuration has changed
 */

removeOldDir = (function(_this) {
  return function(callback) {
    var newDir, oldDir;
    newDir = config('dir_source');
    oldDir = oldConfig('dir_source');
    return fs.rmdir(newDir, function(err) {
      if (err != null) {
        return callback("Error : source directory doesn't exist");
      } else {
        return fs.rename(oldDir, newDir, function(err) {
          return callback(err);
        });
      }
    });
  };
})(this);


/*
    Initialize source directory
        * Create new directory
        * Remove old directory if necessary
 */

initDir = (function(_this) {
  return function(callback) {
    return initNewDir(function(err) {
      if (err != null) {
        return callback(err);
      } else {
        if (oldConfig('dir_source')) {
          return removeOldDir(callback);
        } else {
          return callback();
        }
      }
    });
  };
})(this);


/* 
    Initialize source code directory and stack.json file
 */

initAppsFiles = (function(_this) {
  return function(callback) {
    var stackFile;
    console.log('init: source dir');
    stackFile = config('file_stack');
    return initDir(function(err) {
      if (err != null) {
        callback(err);
      }
      if (oldConfig('file_stack')) {
        return fs.rename(oldConfig('file_stack'), stackFile, callback);
      } else {
        if (!fs.existsSync(stackFile)) {
          return fs.open(stackFile, 'w', callback);
        } else {
          return callback();
        }
      }
    });
  };
})(this);


/*
    Initialize directory which contains log files
 */

initLogFiles = (function(_this) {
  return function(callback) {
    console.log('init: log files');
    if (!fs.existsSync('/var/log/cozy')) {
      return fs.mkdir('/var/log/cozy', function(err) {
        return callback(err);
      });
    } else {
      return callback();
    }
  };
})(this);


/*
    Init stack token stored in '/etc/cozy/stack.token'
 */

initTokenFile = (function(_this) {
  return function(callback) {
    var tokenFile;
    console.log("init : token file");
    tokenFile = config('file_token');
    if (tokenFile === '/etc/cozy/stack.token' && !fs.existsSync('/etc/cozy')) {
      fs.mkdirSync('/etc/cozy');
    }
    if (fs.existsSync(tokenFile)) {
      fs.unlinkSync(tokenFile);
    }
    return fs.open(tokenFile, 'w', function(err, fd) {
      if (err) {
        return callback("We cannot create token file. As you sure, you have a good path ?");
      } else {
        return fs.chmod(tokenFile, '0600', function(err) {
          var token;
          if (err != null) {
            callback(err);
          }
          token = randomString();
          return fs.writeFile(tokenFile, token, function(err) {
            permission.init(token);
            return callback(err);
          });
        });
      }
    });
  };
})(this);


/* 
    Initialize files :
        * Initialize configuration
        * Apply patch if necessary
        * Initialize files
 */

module.exports.init = (function(_this) {
  return function(callback) {
    return conf.init(function(err) {
      if (err) {
        return callback(err);
      } else {
        if (conf.patch() === "1") {
          return patch.apply(function(err) {
            if (err) {
              return callback(err);
            } else {
              return initFiles(function(err) {
                conf.removeOld();
                return callback(err);
              });
            }
          });
        } else {
          return initFiles(callback);
        }
      }
    });
  };
})(this);


/* 
    Initialize files :
        * Initialize stack file and directory of source code
        * Initialize log files
        * Initialize token file
 */

initFiles = (function(_this) {
  return function(callback) {
    return initAppsFiles(function(err) {
      if (err) {
        return callback(err);
      } else {
        return initLogFiles(function(err) {
          conf.removeOld();
          if (process.env.NODE_ENV === "production" || process.env.NODE_ENV === "test") {
            return initTokenFile(callback);
          } else {
            return callback();
          }
        });
      }
    });
  };
})(this);


/*
    Check if couchDB is started
        * If couchDB isn't startec check again after 5 secondes
        * Return error after <test> (by default 5) tests
 */

couchDBStarted = (function(_this) {
  return function(test, callback) {
    if (test == null) {
      test = 5;
    }
    return couchDBClient.get('/', function(err, res, body) {
      if (err == null) {
        return callback(true);
      } else {
        if (test > 0) {
          return setTimeout(function() {
            return couchDBStarted(test - 1, callback);
          }, 5 * 1000);
        } else {
          return callback(false);
        }
      }
    });
  };
})(this);

errors = {};


/*
    Start all applications (other than stack applications)
        * Recover manifest application from document stored in database
        * If it state is 'installed'
            * Start application
            * Check if application is started
            * Update application port in database
        * else
            * Add application in list of installed application
 */

start = (function(_this) {
  return function(apps, callback) {
    var app, appli;
    if ((apps != null) && apps.length > 0) {
      appli = apps.pop();
      app = appli.value;
      app.repository = {
        type: "git",
        url: app.git
      };
      app.scripts = {
        start: "server.js"
      };
      app.name = app.name.toLowerCase();
      if (app.state === "installed") {
        console.log("" + app.name + ": starting ...");
        return controller.start(app, function(err, result) {
          if (err != null) {
            console.log("" + app.name + ": error");
            console.log(err);
            errors[app.name] = new Error("Application doesn't started");
            return start(apps, callback);
          } else {
            appli = appli.value;
            appli.port = result.port;
            clientDS.setBasicAuth('home', permission.get());
            return clientDS.put('/data/', appli, function(err, res, body) {
              console.log("" + app.name + ": started");
              return start(apps, callback);
            });
          }
        });
      } else {
        app = new App(app);
        return controller.addDrone(app.app, function() {
          return start(apps, callback);
        });
      }
    } else {
      return callback();
    }
  };
})(this);


/*
    Check if application is started
        * Try to request application
        * If status code is not 200, 403 or 500 return an error
        (proxy return 500)
 */

checkStart = (function(_this) {
  return function(port, callback) {
    var client;
    client = new Client("http://localhost:" + port);
    return client.get("", function(err, res) {
      var _ref;
      if ((res != null) && ((_ref = res.statusCode) === 200 || _ref === 403 || _ref === 500)) {
        if (res.statusCode === 500) {
          console.log("Warning : receives error 500");
        }
        return callback();
      } else {
        return checkStart(port, callback);
      }
    });
  };
})(this);


/*
    Start stack application <app> defined in <data>
        * Check if application is defined in <data>
        * Start application
        * Check if application is started
 */

startStack = (function(_this) {
  return function(data, app, callback) {
    var err;
    if (data[app] != null) {
      console.log("" + app + ": starting ...");
      return controller.start(data[app], function(err, result) {
        var timeout;
        if ((err != null) || !result) {
          console.log(err);
          err = new Error("" + app + " doesn't started");
          return callback(err);
        } else {
          console.log("" + app + ": checking ...");
          timeout = setTimeout(function() {
            return callback("[Timeout] " + app + " doesn't start");
          }, 30000);
          return checkStart(result.port, function() {
            clearTimeout(timeout);
            console.log("" + app + ": started");
            return setTimeout((function(_this) {
              return function() {
                return callback();
              };
            })(this), 1000);
          });
        }
      });
    } else {
      err = new Error("" + app + " isn't installed");
      return callback(err);
    }
  };
})(this);


/*
    Autostart :
        * Stack application are declared in file stack 
            ( /usr/local/cozy/stack.json by default)
        *  Other applications are declared in couchDB
 */

module.exports.autostart = (function(_this) {
  return function(callback) {
    console.log("### AUTOSTART ###");
    return couchDBStarted(5, function(started) {
      var err;
      if (started) {
        console.log('couchDB: started');
        return fs.readFile(config('file_stack'), 'utf8', function(err, data) {
          if ((data != null) || data === "") {
            try {
              data = JSON.parse(data);
            } catch (_error) {
              console.log("stack isn't installed");
              callback();
              err = true;
            }
            if (!err && (data['data-system'] == null)) {
              console.log("stack isn't installed");
              callback();
              err = true;
            }
            if (err == null) {
              return startStack(data, 'data-system', function(err) {
                if (err != null) {
                  return callback(err);
                } else {
                  clientDS.setBasicAuth('home', permission.get());
                  return clientDS.post('/request/application/all/', {}, function(err, res, body) {
                    if (err != null) {
                      console.log(err);
                    }
                    return start(body, function(errors) {
                      if (errors !== {}) {
                        console.log(errors);
                      }
                      return startStack(data, 'home', function(err) {
                        if (err != null) {
                          console.log(err);
                        }
                        return startStack(data, 'proxy', function(err) {
                          if (err != null) {
                            console.log(err);
                          }
                          return callback();
                        });
                      });
                    });
                  });
                }
              });
            }
          } else {
            console.log("Cannot read stack file");
            return callback(err);
          }
        });
      } else {
        err = new Error("couchDB isn't started");
        return callback(err);
      }
    });
  };
})(this);
