// Generated by CoffeeScript 1.7.1
var Client, checkStart, clientDS, controller, couchDBClient, couchDBStarted, errors, fs, initAppsFiles, initLogFiles, initTokenFile, start, startStack;

fs = require('fs');

Client = require('request-json').JsonClient;

controller = require('./lib/controller');

couchDBClient = new Client('http://localhost:5984');

clientDS = new Client('http://localhost:9101');


/* Initialize file : /usr/local/cozy/apps, /etc/cozy/controller.token, /var/log/cozy */

initAppsFiles = (function(_this) {
  return function(callback) {
    if (!fs.existsSync('/usr/local/cozy')) {
      return fs.mkdir('/usr/local/cozy', function(err) {
        if (err != null) {
          callback(err);
        }
        return fs.mkdir('/usr/local/cozy/apps', function(err) {
          if (err != null) {
            callback(err);
          }
          return fs.open('/usr/local/cozy/apps/stack.json', 'w', function(err) {
            return callback(err);
          });
        });
      });
    } else if (!fs.existsSync('/usr/local/cozy/apps')) {
      return fs.mkdir('/usr/local/cozy/apps', function(err) {
        if (err != null) {
          callback(err);
        }
        return fs.open('/usr/local/cozy/apps/stack.json', 'w', function(err) {
          return callback(err);
        });
      });
    } else if (!fs.existsSync('/usr/local/cozy/apps/stack.json')) {
      return fs.open('/usr/local/cozy/apps/stack.json', 'w', function(err) {
        return callback(err);
      });
    } else {
      return callback();
    }
  };
})(this);

initLogFiles = (function(_this) {
  return function(callback) {
    if (!fs.existsSync('/var/log/cozy')) {
      return fs.mkdir('/var/log/cozy', function(err) {
        return callback(err);
      });
    } else {
      return callback();
    }
  };
})(this);

initTokenFile = (function(_this) {
  return function(callback) {
    if (!fs.existsSync('/etc/cozy')) {
      fs.mkdirSync('/etc/cozy');
    }
    if (fs.existsSync('/etc/cozy/stack.token')) {
      fs.unlinkSync('/etc/cozy/stack.token');
    }
    return fs.open('/etc/cozy/stack.token', 'w', function(err, fd) {
      if (err != null) {
        callback(err);
      }
      return fs.chmod('/etc/cozy/stack.token', '0600', function(err) {
        var token;
        if (err != null) {
          callback(err);
        }
        token = 'test';
        return fs.write(fd, token, 0, 4, 0, function(err) {
          return callback(err);
        });
      });
    });
  };
})(this);

module.exports.init = (function(_this) {
  return function(callback) {
    return initAppsFiles(function(err) {
      return initLogFiles(function(err) {
        return initTokenFile(function(err) {
          return callback();
        });
      });
    });
  };
})(this);


/* Autostart */

couchDBStarted = (function(_this) {
  return function(test) {
    if (test == null) {
      test = 5;
    }
    couchDBClient.get('/', function(err, res, body) {});
    if (typeof err === "undefined" || err === null) {
      return true;
    } else {
      if (max < 6) {
        return couchDBStarted(max - 1);
      } else {
        return false;
      }
    }
  };
})(this);

errors = {};

start = (function(_this) {
  return function(apps, callback) {
    var app;
    if (apps.length > 0) {
      app = apps.pop();
      app = app.value;
      app.repository = {
        type: "git",
        url: app.git
      };
      app.scripts = {
        start: "server.js"
      };
      console.log("" + app.name + ": starting ...");
      return controller.start(app, function(err, result) {
        if (err != null) {
          console.log("" + app.name + ": error");
          errors[app.name] = new Error("Application doesn't started");
          return start(apps, callback);
        } else {
          console.log("" + app.name + ": started");
          return start(apps, callback);
        }
      });
    } else {
      return callback();
    }
  };
})(this);

checkStart = (function(_this) {
  return function(port, callback) {
    var client;
    client = new Client("http://localhost:" + port);
    return client.get("", function(err, res) {
      var _ref;
      if ((res != null) && ((_ref = res.statusCode) === 200 || _ref === 403)) {
        return callback();
      } else {
        return checkStart(port, callback);
      }
    });
  };
})(this);

startStack = (function(_this) {
  return function(data, app, callback) {
    var err;
    if (data[app] != null) {
      console.log("" + app + ": starting ...");
      return controller.start(data[app], function(err, result) {
        var timeout;
        if ((err != null) || !result) {
          err = new Error("" + app + " doesn't started");
          return callback(err);
        } else {
          console.log("" + app + ": checking ...");
          timeout = setTimeout(function() {
            return callback("[Timeout] Data system doesn't start");
          }, 30000);
          return checkStart(result.port, function() {
            clearTimeout(timeout);
            console.log("" + app + ": started");
            return callback();
          });
        }
      });
    } else {
      err = new Error("" + app + " isn't installed");
      return callback(err);
    }
  };
})(this);

module.exports.autostart = (function(_this) {
  return function(callback) {
    var err;
    console.log("AUTOSTART");
    if (couchDBStarted()) {
      console.log('couchDB: started');
      return fs.readFile('/usr/local/cozy/apps/stack.json', 'utf8', function(err, data) {
        if (data != null) {
          data = JSON.parse(data);
          return startStack(data, 'data-system', function(err) {
            if (err != null) {
              return callback(err);
            } else {
              clientDS.setBasicAuth('home', "test");
              return clientDS.post('/request/application/all/', {}, function(err, res, body) {
                if (err != null) {
                  console.log(err);
                }
                return start(body, function() {
                  if (errors !== {}) {
                    console.log(errors);
                  }
                  return startStack(data, 'home', function(err) {
                    if (err != null) {
                      console.log(err);
                    }
                    return startStack(data, 'proxy', function(err) {
                      if (err != null) {
                        console.log(err);
                      }
                      return callback();
                    });
                  });
                });
              });
            }
          });
        } else {
          err = new Error("stack isn't installed");
          return callback(err);
        }
      });
    } else {
      err = new Error("couchDB isn't started");
      return callback(err);
    }
  };
})(this);
