// Generated by CoffeeScript 1.8.0
var App, Client, checkStart, config, controller, couchDBClient, couchDBStarted, errors, fs, getManifest, isCorrect, log, path, permission, recoverStackApp, start, startStack;

fs = require('fs');

Client = require('request-json-light').JsonClient;

controller = require('./controller');

permission = require('../middlewares/token');

path = require('path');

App = require('./app').App;

config = require('./conf').get;

log = require('printit')();

couchDBClient = new Client('http://localhost:5984');


/*
    Check if couchDB is started
        * If couchDB isn't startec check again after 5 secondes
        * Return error after <test> (by default 5) tests
 */

couchDBStarted = function(test, callback) {
  if (test == null) {
    test = 5;
  }
  return couchDBClient.get('/', function(err, res, body) {
    if (err == null) {
      return callback(true);
    } else {
      if (test > 0) {
        return setTimeout(function() {
          return couchDBStarted(test - 1, callback);
        }, 5 * 1000);
      } else {
        return callback(false);
      }
    }
  });
};

isCorrect = function(app) {
  return (app.git != null) && (app.name != null) && (app.state != null) && fs.existsSync(path.join(config('dir_source'), app.name)) && fs.existsSync(path.join(config('dir_source'), app.name, "package.json"));
};


/*
    Return manifest of <app> from database application
 */

getManifest = function(app) {
  app.repository = {
    type: "git",
    url: app.git
  };
  app.name = app.name.toLowerCase();
  return app;
};

errors = {};


/*
    Start all applications (other than stack applications)
        * Recover manifest application from document stored in database
        * If it state is 'installed'
            * Start application
            * Check if application is started
            * Update application port in database
        * else
            * Add application in list of installed application
 */

start = function(apps, clientDS, callback) {
  var app, appli, cb;
  if ((apps != null) && apps.length > 0) {
    appli = apps.pop();
    app = getManifest(appli.value);
    if (isCorrect(app)) {
      if (app.state === "installed") {
        log.info("" + app.name + ": starting ...");
        cb = 0;
        return controller.start(app, function(err, result) {
          cb = cb + 1;
          if ((err != null) && cb === 1) {
            log.error("" + app.name + ": error");
            log.error(err);
            errors[app.name] = new Error("Application didn't started");
            return controller.addDrone(app, function() {
              return start(apps, clientDS, callback);
            });
          } else {
            appli = appli.value;
            appli.port = result.port;
            return clientDS.put("data/merge/" + appli._id + "/", appli, function(err, res, body) {
              log.info("" + app.name + ": started");
              return start(apps, clientDS, callback);
            });
          }
        });
      } else {
        app = new App(app);
        return controller.addDrone(app.app, function() {
          return start(apps, clientDS, callback);
        });
      }
    } else {
      return start(apps, clientDS, callback);
    }
  } else {
    return callback();
  }
};


/*
    Check if application is started
        * Try to request application
        * If status code is not 200, 403 or 500 return an error
        (proxy return 500)
 */

checkStart = function(port, callback) {
  var client;
  client = new Client("http://localhost:" + port);
  return client.get("", function(err, res) {
    var _ref;
    if (res != null) {
      if ((_ref = res.statusCode) !== 200 && _ref !== 401 && _ref !== 402 && _ref !== 302) {
        log.warn("Warning : receives error " + res.statusCode);
      }
      return callback();
    } else {
      return checkStart(port, callback);
    }
  });
};


/*
    Recover stack applications
        * Read stack file
        * Parse file
        * Return error if file stack doesn't exist
            or if isn't in correct json
        * Return stack manifest
 */

recoverStackApp = function(callback) {
  return fs.readFile(config('file_stack'), 'utf8', function(err, data) {
    if ((data != null) || data === "") {
      try {
        data = JSON.parse(data);
        return callback(null, data);
      } catch (_error) {
        log.info("Stack isn't installed");
        return callback("Stack isn't installed");
      }
    } else {
      log.error("Cannot read stack file");
      return callback("Cannot read stack file");
    }
  });
};


/*
    Start stack application <app> defined in <stackManifest>
        * Check if application is defined in <stackManifest>
        * Start application
        * Check if application is started
 */

startStack = function(stackManifest, app, callback) {
  var err;
  if (stackManifest[app] != null) {
    log.info("" + app + ": starting ...");
    return controller.start(stackManifest[app], function(err, result) {
      var timeout;
      if ((err != null) || !result) {
        log.error("" + app + " didn't started");
        log.error(err);
        err = new Error("" + app + " didn't started");
        return callback(err);
      } else {
        log.info("" + app + ": checking ...");
        timeout = setTimeout(function() {
          return callback("[Timeout] " + app + " didn't start");
        }, 30000);
        return checkStart(result.port, function() {
          clearTimeout(timeout);
          log.info("" + app + ": started");
          return setTimeout(function() {
            return callback(null, result.port);
          }, 1000);
        });
      }
    });
  } else {
    err = new Error("" + app + " isn't installed");
    return callback();
  }
};


/*
    Autostart :
        * Stack application are declared in file stack
            /usr/local/cozy/stack.json by default
        *  Other applications are declared in couchDB
 */

module.exports.start = function(callback) {
  log.info("### AUTOSTART ###");
  return couchDBStarted(5, function(started) {
    var err;
    if (started) {
      log.info('couchDB: started');
      return recoverStackApp(function(err, manifest) {
        if (err != null) {
          return callback();
        } else if (manifest['data-system'] == null) {
          log.info("stack isn't installed");
          return callback();
        } else {
          return startStack(manifest, 'data-system', function(err, port) {
            var clientDS, requestPath;
            if (err != null) {
              return callback(err);
            } else {
              clientDS = new Client("http://localhost:" + port);
              clientDS.setBasicAuth('home', permission.get());
              requestPath = '/request/application/all/';
              return clientDS.post(requestPath, {}, function(err, res, body) {
                if ((res != null ? res.statusCode : void 0) === 404) {
                  return callback();
                } else {
                  return start(body, clientDS, function(errors) {
                    startStack(manifest, 'home', function(err) {
                      if (err != null) {
                        return log.error(err);
                      }
                    });
                    return startStack(manifest, 'proxy', function(err) {
                      if (err != null) {
                        log.error(err);
                      }
                      return callback();
                    });
                  });
                }
              });
            }
          });
        }
      });
    } else {
      err = new Error("couchDB isn't started");
      return callback(err);
    }
  });
};
