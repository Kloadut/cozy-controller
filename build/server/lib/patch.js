// Generated by CoffeeScript 1.8.0
var checkOldSource, config, createStackFile, fs, getRepo, move, path, pathRoot, rm, spawn, updateSourceDir;

path = require("path");

fs = require('fs');

spawn = require('child_process').spawn;

config = require('./conf').get;

pathRoot = "/usr/local/cozy/apps/";

checkOldSource = (function(_this) {
  return function(name) {
    return (fs.existsSync(path.join(pathRoot, name, name))) && (!fs.existsSync(path.join(pathRoot, name, name, "server.coffee"))) && (name !== "stack.json");
  };
})(this);

getRepo = (function(_this) {
  return function(name) {
    var rep, reps, _i, _len;
    reps = fs.readdirSync(path.join(pathRoot, name, name));
    for (_i = 0, _len = reps.length; _i < _len; _i++) {
      rep = reps[_i];
      if (rep.indexOf('.') === -1) {
        return rep;
      }
    }
  };
})(this);

move = function(source, dest, callback) {
  var child;
  child = spawn('sudo', ["mv", source, dest]);
  child.stderr.setEncoding('utf8');
  child.stderr.on('data', (function(_this) {
    return function(msg) {
      return console.log(msg);
    };
  })(this));
  return child.on('close', (function(_this) {
    return function(code) {
      if (code !== 0) {
        console.log("Cannot move old source");
        return callback("" + name + " : Cannot move old source");
      } else {
        return callback();
      }
    };
  })(this));
};

rm = function(dir, callback) {
  var child;
  child = spawn('sudo', ["rm", "-rf", dir]);
  child.stderr.setEncoding('utf8');
  child.stderr.on('data', (function(_this) {
    return function(msg) {
      return console.log(msg);
    };
  })(this));
  return child.on('close', (function(_this) {
    return function(code) {
      if (code !== 0) {
        console.log("Cannot move old source");
        return callback("" + name + " : Cannot remove old source");
      } else {
        console.log("" + dir + " : Moved");
        return callback();
      }
    };
  })(this));
};

updateSourceDir = (function(_this) {
  return function(apps, callback) {
    var dest, name, repo, source;
    if (apps.length > 0) {
      name = apps.pop();
      if (checkOldSource(name)) {
        repo = getRepo(name);
        if (repo === name) {
          source = path.join(pathRoot, name, repo);
          return move(source, path.join(pathRoot, name, "cozy-" + repo), function(err) {
            var dest;
            console.log(err);
            if (err != null) {
              return callback(err);
            } else {
              dest = path.join(pathRoot, name, repo);
              source = path.join(pathRoot, name, "cozy-" + name, repo);
              return move(source, dest, function(err) {
                console.log(err);
                if (err != null) {
                  return callback(err);
                } else {
                  return rm("/usr/local/cozy/apps/" + name + "/cozy-" + name, function(err) {
                    console.log(err);
                    if (err != null) {
                      return callback(err);
                    } else {
                      return updateSourceDir(apps, callback);
                    }
                  });
                }
              });
            }
          });
        } else {
          dest = path.join(pathRoot, name, repo);
          source = path.join(pathRoot, name, name, repo);
          return move(source, dest, function(err) {
            if (err != null) {
              return callback(err);
            } else {
              return rm(path.join(pathRoot, name, name), function(err) {
                if (err != null) {
                  return callback(err);
                } else {
                  return updateSourceDir(apps, callback);
                }
              });
            }
          });
        }
      } else {
        console.log("" + name + " : Already moved");
        return updateSourceDir(apps, callback);
      }
    } else {
      return callback();
    }
  };
})(this);

createStackFile = (function(_this) {
  return function(callback) {
    var autostartPath, stackFile;
    autostartPath = "/usr/local/cozy/autostart";
    stackFile = config('file_stack');
    return fs.open(stackFile, 'w', function(err) {
      var dataSystemFile, ds, file, files, home, homeFile, proxy, proxyFile, stack, _i, _len;
      files = fs.readdirSync('/usr/local/cozy/autostart/');
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.indexOf('home') !== -1) {
          homeFile = file;
        } else if (file.indexOf('proxy') !== -1) {
          proxyFile = file;
        } else if (file.indexOf('data-system') !== -1) {
          dataSystemFile = file;
        }
      }
      ds = JSON.parse(fs.readFileSync(path.join(autostartPath, dataSystemFile), 'utf8'));
      home = JSON.parse(fs.readFileSync(path.join(autostartPath, homeFile), 'utf8'));
      proxy = JSON.parse(fs.readFileSync(path.join(autostartPath, proxyFile), 'utf8'));
      stack = {
        "data-system": ds,
        "home": home,
        "proxy": proxy
      };
      return fs.writeFile(stackFile, JSON.stringify(stack), callback);
    });
  };
})(this);

module.exports.apply = (function(_this) {
  return function(callback) {
    var dirs;
    console.log("APPLY patch ...");
    if (fs.existsSync('/etc/cozy/controller.token')) {
      fs.unlinkSync('/etc/cozy/controller.token');
    }
    dirs = fs.readdirSync('/usr/local/cozy/apps');
    console.log("Move old source directory ...");
    return updateSourceDir(dirs, function(err) {
      if (err != null) {
        console.log(err);
        return callback(err);
      } else {
        console.log("Create Stack File ...");
        return createStackFile(callback);
      }
    });
  };
})(this);
