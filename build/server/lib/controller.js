// Generated by CoffeeScript 1.7.1
var App, addUser, drones, fs, npm, path, repo, running, spawn, spawner, startApp, type;

fs = require('fs');

spawner = require('./spawner');

npm = require('./npm');

repo = require('./repo');

type = [];

type['git'] = require('./git');

path = require('path');

App = require('./app').App;

spawn = require('child_process').spawn;

drones = [];

running = [];

addUser = (function(_this) {
  return function(app, callback) {
    var appdir, child, env, user;
    env = {};
    user = env.USER = app.user;
    appdir = env.HOME = app.userDir;
    child = spawn('bash', [path.join(__dirname, '..', 'lib', 'adduser.sh')], {
      env: env
    });
    child.stderr.on('data', function(data) {
      return console.log(data.toString());
    });
    return child.on('exit', function(code) {
      if (code === 0) {
        return callback();
      } else {
        return callback(new Error('Unable to create user'));
      }
    });
  };
})(this);

startApp = (function(_this) {
  return function(app, callback) {
    if (running[app] != null) {
      return callback('Application already exists');
    } else {
      return spawner.start(app, function(err, result) {
        if (result != null) {
          drones[app.name] = result.pkg;
        }
        if (err != null) {
          return callback(err);
        } else if (result == null) {
          err = new Error('Unknown error from Spawner.');
          return callback(err);
        } else {
          running[app.name] = result;
          return callback(null, result);
        }
      });
    }
  };
})(this);

module.exports.install = (function(_this) {
  return function(manifest, callback) {
    var app, _ref;
    app = new App(manifest);
    app = app.app;
    console.log(drones);
    console.log(app.dir);
    if ((drones[app.name] != null) || fs.existsSync(app.dir)) {
      console.log("" + app.name + ":already installed");
      console.log("" + app.name + ":start application");
      return startApp(app, callback);
    } else {
      if ((_ref = app.name) === 'data-system' || _ref === 'home' || _ref === 'proxy') {
        fs.readFile('/usr/local/cozy/apps/stack.json', 'utf8', function(err, data) {
          try {
            data = JSON.parse(data);
          } catch (_error) {
            data = {};
          }
          data[app.name] = app;
          return fs.open('/usr/local/cozy/apps/stack.json', 'w', function(err, fd) {
            console.log(data);
            return fs.write(fd, JSON.stringify(data), 0, data.length, 0, function(err) {
              return console.log(err);
            });
          });
        });
      }
      return addUser(app, function() {
        console.log("" + app.name + ":create directory");
        return repo.create(app, function(err) {
          drones[app.name] = app;
          if (err != null) {
            callback(err);
          }
          console.log("" + app.name + ":git clone");
          return type[app.repository.type].init(app, function(err) {
            if (err != null) {
              callback(err);
            }
            console.log("" + app.name + ":npm install");
            return npm.install(app, function(err) {
              if (err != null) {
                callback(err);
              }
              console.log("" + app.name + ":start application");
              return startApp(app, function(err, result) {
                if (err != null) {
                  callback(err);
                }
                return callback(null, result);
              });
            });
          });
        });
      });
    }
  };
})(this);

module.exports.start = function(manifest, callback) {
  var app, err;
  app = new App(manifest);
  app = app.app;
  if ((drones[app.name] != null) || fs.existsSync(app.dir)) {
    return startApp(app, (function(_this) {
      return function(err, result) {
        if (err != null) {
          return callback(err);
        } else {
          return callback(null, result);
        }
      };
    })(this));
  } else {
    err = new Error('Cannot start an application not installed');
    return callback(err);
  }
};

module.exports.stop = function(name, callback) {
  var err, onErr, onStop;
  if (running[name] != null) {
    onStop = (function(_this) {
      return function() {
        return delete running[name];
      };
    })(this);
    onErr = (function(_this) {
      return function(err) {
        return running[name].removeListener('stop', onStop);
      };
    })(this);
    running[name].monitor.once('stop', onStop);
    running[name].monitor.once('exit', onStop);
    running[name].monitor.once('error', onErr);
    try {
      running[name].monitor.stop();
    } catch (_error) {
      err = _error;
      onErr(err);
    }
    return callback(null, name);
  } else {
    err = new Error('Cannot stop an application not started');
    return callback(err);
  }
};

module.exports.stopAll = function(callback) {
  var name, onErr, onStop, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = running.length; _i < _len; _i++) {
    name = running[_i];
    console.log("" + name + ":stop application");
    onStop = (function(_this) {
      return function() {
        return delete running[name];
      };
    })(this);
    onErr = (function(_this) {
      return function(err) {
        return running[name].removeListener('stop', onStop);
      };
    })(this);
    running[name].monitor.once('stop', onStop);
    running[name].monitor.once('exit', onStop);
    running[name].monitor.once('error', onErr);
    running[name].monitor.stop();
    _results.push(delete running[name]);
  }
  return _results;
};

module.exports.uninstall = function(name, callback) {
  var app, err;
  if (running[name] != null) {
    console.log("" + name + ":stop application");
    running[name].monitor.stop();
    delete running[name];
  }
  if (drones[name] != null) {
    app = drones[name];
    return repo["delete"](app, (function(_this) {
      return function(err) {
        console.log("" + name + ":delete directory");
        delete drones[name];
        console.log(drones);
        if (err) {
          callback(err);
        }
        return callback(null, name);
      };
    })(this));
  } else {
    err = new Error('Application is not installed');
    console.log(err);
    return callback(err);
  }
};

module.exports.update = function(name, callback) {
  var app, restart;
  restart = false;
  if (running[name] != null) {
    console.log("" + name + ":stop application");
    running[name].stop();
    restart = true;
  }
  app = drones[name];
  console.log("" + name + ":update application");
  return type[app.repository.type].update(app, (function(_this) {
    return function(err) {
      if (err != null) {
        callback(err);
      }
      if (restart) {
        return startApp(app, function(err, result) {
          console.log("" + name + ":start application");
          if (err != null) {
            callback(err);
          }
          return callback(null, result);
        });
      } else {
        return callback(null, app);
      }
    };
  })(this));
};

module.exports.all = function(callback) {
  return callback(null, drones);
};

module.exports.running = function(callback) {
  var app, apps, _i, _len;
  apps = [];
  for (_i = 0, _len = drones.length; _i < _len; _i++) {
    app = drones[_i];
    if (running[app.name] != null) {
      apps[app.name] = app;
    }
  }
  return callback(null, apps);
};
