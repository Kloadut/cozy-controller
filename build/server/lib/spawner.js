// Generated by CoffeeScript 1.7.1
var exec, forever, fs, mixin, path, semver;

forever = require('forever-monitor');

fs = require('fs');

path = require('path');

semver = require('semver');

exec = require('child_process').exec;

mixin = require('flatiron').common.mixin;


/*getSpawnOptions = (app, callback) ->
    engine = (app.engines || app.engine || {node: app.engine}).node
    engineDir = haibu.config.get('directories:node-installs')
    nodeVersions = engineDir && fs.readdirSync(engineDir)
    carapaceDir = haibu.config.get('directories:carapace-installs')
    carapaceVersions = carapaceDir && fs.readdirSync(carapaceDir)
    env = {}
    command = 'node'
    options = {}

    if nodeVersions
        engine = (app.engines || app.engine || {node: app.engine}).node;
        if typeof engine !== 'string'
          engine = '0.6.x'        
        version = semver.maxSatisfying(nodeVersions, engine);
        if (!version) 
            var err = new Error('Error spawning drone: no matching engine found');
            err.blame = 
                type: 'user',
                message: 'Repository configuration'
            callback err
        
        nodeDir = path.join(engineDir, version)

    if carapaceVersions
        if typeof engine !== 'string'
            engine = '0.4.x'
        version = semver.maxSatisfying(carapaceVersions, engine);
        if !version
            var err = new Error 'Error spawning drone: no matching carapace found'
            err.blame = 
                type: 'user',
                message: 'Repository configuration'
            callback err        
        options.carapaceBin = path.join(carapaceDir, version, 'node_modules', 'cozy-controller-carapace', 'bin', 'carapace');      
    else 
        options.carapaceBin = path.join(require.resolve('cozy-controller-carapace'), '..', '..', 'bin', 'carapace');

    if (version) 
     * Add node (should be configured with --no-npm) and -g modules to path of repo
        if semver.lt(version, '0.6.5')
            options.forkShim = carapaceVersions ? path.join(options.carapaceBin, '..', '..', '..', 'node-fork', 'lib', 'fork.js') : true;
        env.NODE_VERSION = 'v'+version;
        env.NODE_PREFIX = nodeDir;
        env.NODE_PATH = path.join(nodeDir, 'lib', 'node_modules');
        env.NODE_CHANNEL_FD = 0;
        var concatPATH = (process.env.PATH ? ':' + process.env.PATH : '');
        env.PATH = path.join(nodeDir, 'bin') + ':' + path.join(nodeDir, 'node_modules') + concatPATH;
        var concatCPATH = (process.env.CPATH ? ':' + process.env.CPATH : '');
        env.CPATH = path.join(nodeDir, 'include') + ':' + path.join(nodeDir, 'include', 'node') + concatCPATH;
        var concatLIBRARY_PATH = (process.env.LIBRARY_PATH ? ':' + process.env.LIBRARY_PATH : '');
        env.LIBRARY_PATH = path.join(nodeDir, 'lib') + ':' + path.join(nodeDir, 'lib', 'node') + concatLIBRARY_PATH;
        options.cwd = nodeDir;
        command = path.join(nodeDir, 'bin', 'node');

    var carapaceEnv = haibu.config.get('carapace:env');
    if (carapaceEnv) mixin(env, carapaceEnv);
    if (app.env) mixin(env, app.env);
    options.env = env;
    options.command = command;
    callback null, options;
 */

module.exports.start = function(app, callback) {
  var env, foreverOptions, logFile, logPath, onError, onExit, onRestart, onStart, onStderr, onStdout, onTimeout, server, timeout, token, _ref;
  if ((_ref = app.name) === "home" || _ref === "proxy" || _ref === "data-system") {
    token = haibu.config.get('authToken') || "";
  } else {
    token = app.password;
  }
  env = {
    "NAME": app.name,
    "TOKEN": token
  };
  foreverOptions = {
    fork: true,
    silent: true,
    max: 5,
    stdio: ['ipc', 'pipe', 'pipe'],
    cwd: repo.homeDir,
    hideEnv: haibu.config.get('hideEnv'),
    env: env,
    killTree: true,
    killTTL: 0,
    command: 'node'
  };
  logPath = "/var/log/cozy/" + app.name + ".log";
  if (fs.existsSync(logPath)) {
    logFile = fs.createWriteStream(logPath);
  }
  server = repo.startScript;
  if (server.slice(server.lastIndexOf("."), server.length) === ".coffee") {
    foreverOptions.options = ['--plugin', 'coffee'];
  }
  fs.stat(repo.startScript, (function(_this) {
    return function(err, stats) {
      if (err != null) {
        err = new Error("package.json error: can\'t find starting script: " + repo.startScript);
        return callback(err);
      }
    };
  })(this));
  this.process = new forever.Monitor(repo.startScript, foreverOptions);
  onStdout = function(data) {
    data = data.toString();
    if (logFile != null) {
      return logFile.write(data);
    }
  };
  onStderr = function(data) {
    data = data.toString();
    return console.log("" + app.name + ":error " + data);
  };
  onExit = function() {
    this.process.removeListener('error', onError);
    clearTimeout(timeout);
    if (callback) {
      return callback(new Error("" + app.name + " CANT START"));
    } else {
      console.log("" + app.name + " HAS FAILLED TOO MUCH");
      return setTimeout(((function(_this) {
        return function() {
          return process.exit(1);
        };
      })(this)), 1);
    }
  };
  onError = function(err) {
    return console.log(err);
  };
  onStart = function(monitor, data) {
    callback(null);
    return callback = null;
  };
  onRestart = function() {
    return console.log("{app.name}:restart");
  };
  onTimeout = function() {
    var err;
    this.process.removeListener('exit', onExit);
    this.process.stop();
    err = new Error('Error spawning drone');
    err.stdout = stdout.join('\n');
    err.stderr = stderr.join('\n');
    return callback(err);
  };
  this.process.start();
  timeout = setTimeout(onTimeout, haibu.config.get('portTimeout') || 8000000);
  this.process.on('stdout', onStdout);
  this.process.on('stderr', onStderr);
  this.process.once('exit', onExit);
  this.process.once('error', onError);
  this.process.once('start', onStart);
  return this.process.on('restart', onRestart);
};
